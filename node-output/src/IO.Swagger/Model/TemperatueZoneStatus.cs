/* 
 * home-iot-api
 *
 * The API for the EatBacon IOT project
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// status of a single zone
    /// </summary>
    [DataContract]
        public partial class TemperatueZoneStatus :  IEquatable<TemperatueZoneStatus>, IValidatableObject
    {
        /// <summary>
        /// the temperature units
        /// </summary>
        /// <value>the temperature units</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnitsEnum
        {
            /// <summary>
            /// Enum Celsius for value: celsius
            /// </summary>
            [EnumMember(Value = "celsius")]
            Celsius = 1,
            /// <summary>
            /// Enum Fahrenheit for value: fahrenheit
            /// </summary>
            [EnumMember(Value = "fahrenheit")]
            Fahrenheit = 2        }
        /// <summary>
        /// the temperature units
        /// </summary>
        /// <value>the temperature units</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public UnitsEnum? Units { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatueZoneStatus" /> class.
        /// </summary>
        /// <param name="id">the unique identifier for the zone (required).</param>
        /// <param name="name">the name of the zone.</param>
        /// <param name="value">the temperature in the zone (required).</param>
        /// <param name="units">the temperature units (default to UnitsEnum.Fahrenheit).</param>
        /// <param name="timestamp">the timestamp when the temperature was measured (required).</param>
        public TemperatueZoneStatus(string id = default(string), string name = default(string), double? value = default(double?), UnitsEnum? units = UnitsEnum.Fahrenheit, DateTime? timestamp = default(DateTime?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for TemperatueZoneStatus and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for TemperatueZoneStatus and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for TemperatueZoneStatus and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            this.Name = name;
            // use default value if no "units" provided
            if (units == null)
            {
                this.Units = UnitsEnum.Fahrenheit;
            }
            else
            {
                this.Units = units;
            }
        }
        
        /// <summary>
        /// the unique identifier for the zone
        /// </summary>
        /// <value>the unique identifier for the zone</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// the name of the zone
        /// </summary>
        /// <value>the name of the zone</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// the temperature in the zone
        /// </summary>
        /// <value>the temperature in the zone</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }


        /// <summary>
        /// the timestamp when the temperature was measured
        /// </summary>
        /// <value>the timestamp when the temperature was measured</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemperatueZoneStatus {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemperatueZoneStatus);
        }

        /// <summary>
        /// Returns true if TemperatueZoneStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TemperatueZoneStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemperatueZoneStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
