/* 
 * home-iot-api
 *
 * The API for the EatBacon IOT project
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ForecastTemperature
    /// </summary>
    [DataContract]
        public partial class ForecastTemperature :  IEquatable<ForecastTemperature>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForecastTemperature" /> class.
        /// </summary>
        /// <param name="low">low.</param>
        /// <param name="high">high.</param>
        /// <param name="morning">morning.</param>
        /// <param name="day">day.</param>
        /// <param name="evening">evening.</param>
        /// <param name="night">night.</param>
        public ForecastTemperature(double? low = default(double?), double? high = default(double?), double? morning = default(double?), double? day = default(double?), double? evening = default(double?), double? night = default(double?))
        {
            this.Low = low;
            this.High = high;
            this.Morning = morning;
            this.Day = day;
            this.Evening = evening;
            this.Night = night;
        }
        
        /// <summary>
        /// Gets or Sets Low
        /// </summary>
        [DataMember(Name="low", EmitDefaultValue=false)]
        public double? Low { get; set; }

        /// <summary>
        /// Gets or Sets High
        /// </summary>
        [DataMember(Name="high", EmitDefaultValue=false)]
        public double? High { get; set; }

        /// <summary>
        /// Gets or Sets Morning
        /// </summary>
        [DataMember(Name="morning", EmitDefaultValue=false)]
        public double? Morning { get; set; }

        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public double? Day { get; set; }

        /// <summary>
        /// Gets or Sets Evening
        /// </summary>
        [DataMember(Name="evening", EmitDefaultValue=false)]
        public double? Evening { get; set; }

        /// <summary>
        /// Gets or Sets Night
        /// </summary>
        [DataMember(Name="night", EmitDefaultValue=false)]
        public double? Night { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForecastTemperature {\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Morning: ").Append(Morning).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Evening: ").Append(Evening).Append("\n");
            sb.Append("  Night: ").Append(Night).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForecastTemperature);
        }

        /// <summary>
        /// Returns true if ForecastTemperature instances are equal
        /// </summary>
        /// <param name="input">Instance of ForecastTemperature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForecastTemperature input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.Morning == input.Morning ||
                    (this.Morning != null &&
                    this.Morning.Equals(input.Morning))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Evening == input.Evening ||
                    (this.Evening != null &&
                    this.Evening.Equals(input.Evening))
                ) && 
                (
                    this.Night == input.Night ||
                    (this.Night != null &&
                    this.Night.Equals(input.Night))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Low != null)
                    hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.High != null)
                    hashCode = hashCode * 59 + this.High.GetHashCode();
                if (this.Morning != null)
                    hashCode = hashCode * 59 + this.Morning.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Evening != null)
                    hashCode = hashCode * 59 + this.Evening.GetHashCode();
                if (this.Night != null)
                    hashCode = hashCode * 59 + this.Night.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
