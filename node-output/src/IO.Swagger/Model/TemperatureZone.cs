/* 
 * home-iot-api
 *
 * The API for the EatBacon IOT project
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// a single temperature zone
    /// </summary>
    [DataContract]
        public partial class TemperatureZone :  IEquatable<TemperatureZone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureZone" /> class.
        /// </summary>
        /// <param name="id">the unique identifier for the zone (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="inputPosition">inputPosition.</param>
        /// <param name="outputPosition">outputPosition.</param>
        /// <param name="zone">zone.</param>
        public TemperatureZone(int? id = default(int?), string name = default(string), int? inputPosition = default(int?), int? outputPosition = default(int?), string zone = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for TemperatureZone and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TemperatureZone and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.InputPosition = inputPosition;
            this.OutputPosition = outputPosition;
            this.Zone = zone;
        }
        
        /// <summary>
        /// the unique identifier for the zone
        /// </summary>
        /// <value>the unique identifier for the zone</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets InputPosition
        /// </summary>
        [DataMember(Name="inputPosition", EmitDefaultValue=false)]
        public int? InputPosition { get; set; }

        /// <summary>
        /// Gets or Sets OutputPosition
        /// </summary>
        [DataMember(Name="outputPosition", EmitDefaultValue=false)]
        public int? OutputPosition { get; set; }

        /// <summary>
        /// Gets or Sets Zone
        /// </summary>
        [DataMember(Name="zone", EmitDefaultValue=false)]
        public string Zone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemperatureZone {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  InputPosition: ").Append(InputPosition).Append("\n");
            sb.Append("  OutputPosition: ").Append(OutputPosition).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemperatureZone);
        }

        /// <summary>
        /// Returns true if TemperatureZone instances are equal
        /// </summary>
        /// <param name="input">Instance of TemperatureZone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemperatureZone input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.InputPosition == input.InputPosition ||
                    (this.InputPosition != null &&
                    this.InputPosition.Equals(input.InputPosition))
                ) && 
                (
                    this.OutputPosition == input.OutputPosition ||
                    (this.OutputPosition != null &&
                    this.OutputPosition.Equals(input.OutputPosition))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.InputPosition != null)
                    hashCode = hashCode * 59 + this.InputPosition.GetHashCode();
                if (this.OutputPosition != null)
                    hashCode = hashCode * 59 + this.OutputPosition.GetHashCode();
                if (this.Zone != null)
                    hashCode = hashCode * 59 + this.Zone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
