/* 
 * home-iot-api
 *
 * The API for the EatBacon IOT project
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IEnvironmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="days"></param>
        /// <returns>ForecastResponse</returns>
        ForecastResponse GetForecast (int? days);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="days"></param>
        /// <returns>ApiResponse of ForecastResponse</returns>
        ApiResponse<ForecastResponse> GetForecastWithHttpInfo (int? days);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// gets the state of the heater
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>HeaterState</returns>
        HeaterState GetHeaterState (string zoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// gets the state of the heater
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of HeaterState</returns>
        ApiResponse<HeaterState> GetHeaterStateWithHttpInfo (string zoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>TemperatueZoneStatus</returns>
        TemperatueZoneStatus GetZoneTemperature (string zoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of TemperatueZoneStatus</returns>
        ApiResponse<TemperatueZoneStatus> GetZoneTemperatureWithHttpInfo (string zoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// turns the heater on or off
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="state"></param>
        /// <returns>ModelApiResponse</returns>
        ModelApiResponse SetHeaterState (string zoneId, string state);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// turns the heater on or off
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="state"></param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        ApiResponse<ModelApiResponse> SetHeaterStateWithHttpInfo (string zoneId, string state);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TemperatureSummary</returns>
        TemperatureSummary TemperatureSummary ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TemperatureSummary</returns>
        ApiResponse<TemperatureSummary> TemperatureSummaryWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="days"></param>
        /// <returns>Task of ForecastResponse</returns>
        System.Threading.Tasks.Task<ForecastResponse> GetForecastAsync (int? days);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="days"></param>
        /// <returns>Task of ApiResponse (ForecastResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForecastResponse>> GetForecastAsyncWithHttpInfo (int? days);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// gets the state of the heater
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of HeaterState</returns>
        System.Threading.Tasks.Task<HeaterState> GetHeaterStateAsync (string zoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// gets the state of the heater
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (HeaterState)</returns>
        System.Threading.Tasks.Task<ApiResponse<HeaterState>> GetHeaterStateAsyncWithHttpInfo (string zoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of TemperatueZoneStatus</returns>
        System.Threading.Tasks.Task<TemperatueZoneStatus> GetZoneTemperatureAsync (string zoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (TemperatueZoneStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemperatueZoneStatus>> GetZoneTemperatureAsyncWithHttpInfo (string zoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// turns the heater on or off
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="state"></param>
        /// <returns>Task of ModelApiResponse</returns>
        System.Threading.Tasks.Task<ModelApiResponse> SetHeaterStateAsync (string zoneId, string state);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// turns the heater on or off
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="state"></param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> SetHeaterStateAsyncWithHttpInfo (string zoneId, string state);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TemperatureSummary</returns>
        System.Threading.Tasks.Task<TemperatureSummary> TemperatureSummaryAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TemperatureSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemperatureSummary>> TemperatureSummaryAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class EnvironmentApi : IEnvironmentApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvironmentApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentApi"/> class
        /// </summary>
        /// <returns></returns>
        public EnvironmentApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvironmentApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="days"></param>
        /// <returns>ForecastResponse</returns>
        public ForecastResponse GetForecast (int? days)
        {
             ApiResponse<ForecastResponse> localVarResponse = GetForecastWithHttpInfo(days);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="days"></param>
        /// <returns>ApiResponse of ForecastResponse</returns>
        public ApiResponse< ForecastResponse > GetForecastWithHttpInfo (int? days)
        {
            // verify the required parameter 'days' is set
            if (days == null)
                throw new ApiException(400, "Missing required parameter 'days' when calling EnvironmentApi->GetForecast");

            var localVarPath = "/temperature/forecast/{days}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (days != null) localVarPathParams.Add("days", this.Configuration.ApiClient.ParameterToString(days)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForecast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForecastResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForecastResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForecastResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="days"></param>
        /// <returns>Task of ForecastResponse</returns>
        public async System.Threading.Tasks.Task<ForecastResponse> GetForecastAsync (int? days)
        {
             ApiResponse<ForecastResponse> localVarResponse = await GetForecastAsyncWithHttpInfo(days);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="days"></param>
        /// <returns>Task of ApiResponse (ForecastResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForecastResponse>> GetForecastAsyncWithHttpInfo (int? days)
        {
            // verify the required parameter 'days' is set
            if (days == null)
                throw new ApiException(400, "Missing required parameter 'days' when calling EnvironmentApi->GetForecast");

            var localVarPath = "/temperature/forecast/{days}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (days != null) localVarPathParams.Add("days", this.Configuration.ApiClient.ParameterToString(days)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForecast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForecastResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ForecastResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForecastResponse)));
        }

        /// <summary>
        ///  gets the state of the heater
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>HeaterState</returns>
        public HeaterState GetHeaterState (string zoneId)
        {
             ApiResponse<HeaterState> localVarResponse = GetHeaterStateWithHttpInfo(zoneId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  gets the state of the heater
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of HeaterState</returns>
        public ApiResponse< HeaterState > GetHeaterStateWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling EnvironmentApi->GetHeaterState");

            var localVarPath = "/temperature/{zoneId}/heater";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeaterState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HeaterState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HeaterState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HeaterState)));
        }

        /// <summary>
        ///  gets the state of the heater
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of HeaterState</returns>
        public async System.Threading.Tasks.Task<HeaterState> GetHeaterStateAsync (string zoneId)
        {
             ApiResponse<HeaterState> localVarResponse = await GetHeaterStateAsyncWithHttpInfo(zoneId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  gets the state of the heater
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (HeaterState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HeaterState>> GetHeaterStateAsyncWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling EnvironmentApi->GetHeaterState");

            var localVarPath = "/temperature/{zoneId}/heater";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeaterState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HeaterState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HeaterState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HeaterState)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>TemperatueZoneStatus</returns>
        public TemperatueZoneStatus GetZoneTemperature (string zoneId)
        {
             ApiResponse<TemperatueZoneStatus> localVarResponse = GetZoneTemperatureWithHttpInfo(zoneId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of TemperatueZoneStatus</returns>
        public ApiResponse< TemperatueZoneStatus > GetZoneTemperatureWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling EnvironmentApi->GetZoneTemperature");

            var localVarPath = "/temperature/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZoneTemperature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemperatueZoneStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemperatueZoneStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemperatueZoneStatus)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of TemperatueZoneStatus</returns>
        public async System.Threading.Tasks.Task<TemperatueZoneStatus> GetZoneTemperatureAsync (string zoneId)
        {
             ApiResponse<TemperatueZoneStatus> localVarResponse = await GetZoneTemperatureAsyncWithHttpInfo(zoneId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (TemperatueZoneStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemperatueZoneStatus>> GetZoneTemperatureAsyncWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling EnvironmentApi->GetZoneTemperature");

            var localVarPath = "/temperature/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZoneTemperature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemperatueZoneStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemperatueZoneStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemperatueZoneStatus)));
        }

        /// <summary>
        ///  turns the heater on or off
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="state"></param>
        /// <returns>ModelApiResponse</returns>
        public ModelApiResponse SetHeaterState (string zoneId, string state)
        {
             ApiResponse<ModelApiResponse> localVarResponse = SetHeaterStateWithHttpInfo(zoneId, state);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  turns the heater on or off
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="state"></param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        public ApiResponse< ModelApiResponse > SetHeaterStateWithHttpInfo (string zoneId, string state)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling EnvironmentApi->SetHeaterState");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling EnvironmentApi->SetHeaterState");

            var localVarPath = "/temperature/{zoneId}/heater/{state}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetHeaterState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        ///  turns the heater on or off
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="state"></param>
        /// <returns>Task of ModelApiResponse</returns>
        public async System.Threading.Tasks.Task<ModelApiResponse> SetHeaterStateAsync (string zoneId, string state)
        {
             ApiResponse<ModelApiResponse> localVarResponse = await SetHeaterStateAsyncWithHttpInfo(zoneId, state);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  turns the heater on or off
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="state"></param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> SetHeaterStateAsyncWithHttpInfo (string zoneId, string state)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling EnvironmentApi->SetHeaterState");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling EnvironmentApi->SetHeaterState");

            var localVarPath = "/temperature/{zoneId}/heater/{state}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetHeaterState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TemperatureSummary</returns>
        public TemperatureSummary TemperatureSummary ()
        {
             ApiResponse<TemperatureSummary> localVarResponse = TemperatureSummaryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TemperatureSummary</returns>
        public ApiResponse< TemperatureSummary > TemperatureSummaryWithHttpInfo ()
        {

            var localVarPath = "/temperature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemperatureSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemperatureSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemperatureSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemperatureSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TemperatureSummary</returns>
        public async System.Threading.Tasks.Task<TemperatureSummary> TemperatureSummaryAsync ()
        {
             ApiResponse<TemperatureSummary> localVarResponse = await TemperatureSummaryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TemperatureSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemperatureSummary>> TemperatureSummaryAsyncWithHttpInfo ()
        {

            var localVarPath = "/temperature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemperatureSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemperatureSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemperatureSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemperatureSummary)));
        }

    }
}
