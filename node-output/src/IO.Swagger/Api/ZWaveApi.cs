/* 
 * home-iot-api
 *
 * The API for the EatBacon IOT project
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IZWaveApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LightingSummary</returns>
        LightingSummary GetLightingSummary ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LightingSummary</returns>
        ApiResponse<LightingSummary> GetLightingSummaryWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>DeviceState</returns>
        DeviceState GetSwitchState (string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of DeviceState</returns>
        ApiResponse<DeviceState> GetSwitchStateWithHttpInfo (string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>ModelApiResponse</returns>
        ModelApiResponse SetDimmer (string deviceId, int? value);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        ApiResponse<ModelApiResponse> SetDimmerWithHttpInfo (string deviceId, int? value);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// sets a dimmer to a specific value on a timer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="timeunit"></param>
        /// <param name="units"> (optional, default to milliseconds)</param>
        /// <returns>ModelApiResponse</returns>
        ModelApiResponse SetDimmerTimer (string deviceId, int? value, int? timeunit, string units = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// sets a dimmer to a specific value on a timer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="timeunit"></param>
        /// <param name="units"> (optional, default to milliseconds)</param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        ApiResponse<ModelApiResponse> SetDimmerTimerWithHttpInfo (string deviceId, int? value, int? timeunit, string units = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>ModelApiResponse</returns>
        ModelApiResponse SetSwitch (string deviceId, string value);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        ApiResponse<ModelApiResponse> SetSwitchWithHttpInfo (string deviceId, string value);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// sets a switch to a specific value on a timer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="minutes"></param>
        /// <returns>ModelApiResponse</returns>
        ModelApiResponse SetSwitchTimer (string deviceId, string value, int? minutes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// sets a switch to a specific value on a timer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="minutes"></param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        ApiResponse<ModelApiResponse> SetSwitchTimerWithHttpInfo (string deviceId, string value, int? minutes);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LightingSummary</returns>
        System.Threading.Tasks.Task<LightingSummary> GetLightingSummaryAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LightingSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<LightingSummary>> GetLightingSummaryAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of DeviceState</returns>
        System.Threading.Tasks.Task<DeviceState> GetSwitchStateAsync (string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (DeviceState)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceState>> GetSwitchStateAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>Task of ModelApiResponse</returns>
        System.Threading.Tasks.Task<ModelApiResponse> SetDimmerAsync (string deviceId, int? value);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> SetDimmerAsyncWithHttpInfo (string deviceId, int? value);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// sets a dimmer to a specific value on a timer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="timeunit"></param>
        /// <param name="units"> (optional, default to milliseconds)</param>
        /// <returns>Task of ModelApiResponse</returns>
        System.Threading.Tasks.Task<ModelApiResponse> SetDimmerTimerAsync (string deviceId, int? value, int? timeunit, string units = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// sets a dimmer to a specific value on a timer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="timeunit"></param>
        /// <param name="units"> (optional, default to milliseconds)</param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> SetDimmerTimerAsyncWithHttpInfo (string deviceId, int? value, int? timeunit, string units = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>Task of ModelApiResponse</returns>
        System.Threading.Tasks.Task<ModelApiResponse> SetSwitchAsync (string deviceId, string value);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> SetSwitchAsyncWithHttpInfo (string deviceId, string value);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// sets a switch to a specific value on a timer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="minutes"></param>
        /// <returns>Task of ModelApiResponse</returns>
        System.Threading.Tasks.Task<ModelApiResponse> SetSwitchTimerAsync (string deviceId, string value, int? minutes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// sets a switch to a specific value on a timer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="minutes"></param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> SetSwitchTimerAsyncWithHttpInfo (string deviceId, string value, int? minutes);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ZWaveApi : IZWaveApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ZWaveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ZWaveApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZWaveApi"/> class
        /// </summary>
        /// <returns></returns>
        public ZWaveApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZWaveApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ZWaveApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LightingSummary</returns>
        public LightingSummary GetLightingSummary ()
        {
             ApiResponse<LightingSummary> localVarResponse = GetLightingSummaryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LightingSummary</returns>
        public ApiResponse< LightingSummary > GetLightingSummaryWithHttpInfo ()
        {

            var localVarPath = "/lightingSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLightingSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LightingSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LightingSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LightingSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of LightingSummary</returns>
        public async System.Threading.Tasks.Task<LightingSummary> GetLightingSummaryAsync ()
        {
             ApiResponse<LightingSummary> localVarResponse = await GetLightingSummaryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (LightingSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LightingSummary>> GetLightingSummaryAsyncWithHttpInfo ()
        {

            var localVarPath = "/lightingSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLightingSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LightingSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LightingSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LightingSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>DeviceState</returns>
        public DeviceState GetSwitchState (string deviceId)
        {
             ApiResponse<DeviceState> localVarResponse = GetSwitchStateWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of DeviceState</returns>
        public ApiResponse< DeviceState > GetSwitchStateWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ZWaveApi->GetSwitchState");

            var localVarPath = "/lighting/switches/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSwitchState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceState)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of DeviceState</returns>
        public async System.Threading.Tasks.Task<DeviceState> GetSwitchStateAsync (string deviceId)
        {
             ApiResponse<DeviceState> localVarResponse = await GetSwitchStateAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (DeviceState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceState>> GetSwitchStateAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ZWaveApi->GetSwitchState");

            var localVarPath = "/lighting/switches/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSwitchState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeviceState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceState)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>ModelApiResponse</returns>
        public ModelApiResponse SetDimmer (string deviceId, int? value)
        {
             ApiResponse<ModelApiResponse> localVarResponse = SetDimmerWithHttpInfo(deviceId, value);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        public ApiResponse< ModelApiResponse > SetDimmerWithHttpInfo (string deviceId, int? value)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ZWaveApi->SetDimmer");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ZWaveApi->SetDimmer");

            var localVarPath = "/lighting/dimmers/{deviceId}/{value}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (value != null) localVarPathParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDimmer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>Task of ModelApiResponse</returns>
        public async System.Threading.Tasks.Task<ModelApiResponse> SetDimmerAsync (string deviceId, int? value)
        {
             ApiResponse<ModelApiResponse> localVarResponse = await SetDimmerAsyncWithHttpInfo(deviceId, value);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> SetDimmerAsyncWithHttpInfo (string deviceId, int? value)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ZWaveApi->SetDimmer");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ZWaveApi->SetDimmer");

            var localVarPath = "/lighting/dimmers/{deviceId}/{value}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (value != null) localVarPathParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDimmer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        ///  sets a dimmer to a specific value on a timer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="timeunit"></param>
        /// <param name="units"> (optional, default to milliseconds)</param>
        /// <returns>ModelApiResponse</returns>
        public ModelApiResponse SetDimmerTimer (string deviceId, int? value, int? timeunit, string units = null)
        {
             ApiResponse<ModelApiResponse> localVarResponse = SetDimmerTimerWithHttpInfo(deviceId, value, timeunit, units);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  sets a dimmer to a specific value on a timer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="timeunit"></param>
        /// <param name="units"> (optional, default to milliseconds)</param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        public ApiResponse< ModelApiResponse > SetDimmerTimerWithHttpInfo (string deviceId, int? value, int? timeunit, string units = null)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ZWaveApi->SetDimmerTimer");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ZWaveApi->SetDimmerTimer");
            // verify the required parameter 'timeunit' is set
            if (timeunit == null)
                throw new ApiException(400, "Missing required parameter 'timeunit' when calling ZWaveApi->SetDimmerTimer");

            var localVarPath = "/lighting/dimmers/{deviceId}/{value}/timer/{timeunit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (value != null) localVarPathParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // path parameter
            if (timeunit != null) localVarPathParams.Add("timeunit", this.Configuration.ApiClient.ParameterToString(timeunit)); // path parameter
            if (units != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "units", units)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDimmerTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        ///  sets a dimmer to a specific value on a timer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="timeunit"></param>
        /// <param name="units"> (optional, default to milliseconds)</param>
        /// <returns>Task of ModelApiResponse</returns>
        public async System.Threading.Tasks.Task<ModelApiResponse> SetDimmerTimerAsync (string deviceId, int? value, int? timeunit, string units = null)
        {
             ApiResponse<ModelApiResponse> localVarResponse = await SetDimmerTimerAsyncWithHttpInfo(deviceId, value, timeunit, units);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  sets a dimmer to a specific value on a timer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="timeunit"></param>
        /// <param name="units"> (optional, default to milliseconds)</param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> SetDimmerTimerAsyncWithHttpInfo (string deviceId, int? value, int? timeunit, string units = null)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ZWaveApi->SetDimmerTimer");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ZWaveApi->SetDimmerTimer");
            // verify the required parameter 'timeunit' is set
            if (timeunit == null)
                throw new ApiException(400, "Missing required parameter 'timeunit' when calling ZWaveApi->SetDimmerTimer");

            var localVarPath = "/lighting/dimmers/{deviceId}/{value}/timer/{timeunit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (value != null) localVarPathParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // path parameter
            if (timeunit != null) localVarPathParams.Add("timeunit", this.Configuration.ApiClient.ParameterToString(timeunit)); // path parameter
            if (units != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "units", units)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDimmerTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>ModelApiResponse</returns>
        public ModelApiResponse SetSwitch (string deviceId, string value)
        {
             ApiResponse<ModelApiResponse> localVarResponse = SetSwitchWithHttpInfo(deviceId, value);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        public ApiResponse< ModelApiResponse > SetSwitchWithHttpInfo (string deviceId, string value)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ZWaveApi->SetSwitch");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ZWaveApi->SetSwitch");

            var localVarPath = "/lighting/switches/{deviceId}/{value}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (value != null) localVarPathParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSwitch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>Task of ModelApiResponse</returns>
        public async System.Threading.Tasks.Task<ModelApiResponse> SetSwitchAsync (string deviceId, string value)
        {
             ApiResponse<ModelApiResponse> localVarResponse = await SetSwitchAsyncWithHttpInfo(deviceId, value);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> SetSwitchAsyncWithHttpInfo (string deviceId, string value)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ZWaveApi->SetSwitch");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ZWaveApi->SetSwitch");

            var localVarPath = "/lighting/switches/{deviceId}/{value}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (value != null) localVarPathParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSwitch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        ///  sets a switch to a specific value on a timer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="minutes"></param>
        /// <returns>ModelApiResponse</returns>
        public ModelApiResponse SetSwitchTimer (string deviceId, string value, int? minutes)
        {
             ApiResponse<ModelApiResponse> localVarResponse = SetSwitchTimerWithHttpInfo(deviceId, value, minutes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  sets a switch to a specific value on a timer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="minutes"></param>
        /// <returns>ApiResponse of ModelApiResponse</returns>
        public ApiResponse< ModelApiResponse > SetSwitchTimerWithHttpInfo (string deviceId, string value, int? minutes)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ZWaveApi->SetSwitchTimer");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ZWaveApi->SetSwitchTimer");
            // verify the required parameter 'minutes' is set
            if (minutes == null)
                throw new ApiException(400, "Missing required parameter 'minutes' when calling ZWaveApi->SetSwitchTimer");

            var localVarPath = "/lighting/switches/{deviceId}/{value}/timer/{minutes}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (value != null) localVarPathParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // path parameter
            if (minutes != null) localVarPathParams.Add("minutes", this.Configuration.ApiClient.ParameterToString(minutes)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSwitchTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

        /// <summary>
        ///  sets a switch to a specific value on a timer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="minutes"></param>
        /// <returns>Task of ModelApiResponse</returns>
        public async System.Threading.Tasks.Task<ModelApiResponse> SetSwitchTimerAsync (string deviceId, string value, int? minutes)
        {
             ApiResponse<ModelApiResponse> localVarResponse = await SetSwitchTimerAsyncWithHttpInfo(deviceId, value, minutes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  sets a switch to a specific value on a timer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="minutes"></param>
        /// <returns>Task of ApiResponse (ModelApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelApiResponse>> SetSwitchTimerAsyncWithHttpInfo (string deviceId, string value, int? minutes)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling ZWaveApi->SetSwitchTimer");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ZWaveApi->SetSwitchTimer");
            // verify the required parameter 'minutes' is set
            if (minutes == null)
                throw new ApiException(400, "Missing required parameter 'minutes' when calling ZWaveApi->SetSwitchTimer");

            var localVarPath = "/lighting/switches/{deviceId}/{value}/timer/{minutes}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (value != null) localVarPathParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // path parameter
            if (minutes != null) localVarPathParams.Add("minutes", this.Configuration.ApiClient.ParameterToString(minutes)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSwitchTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelApiResponse)));
        }

    }
}
